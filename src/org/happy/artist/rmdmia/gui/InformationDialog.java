/*
 * InformationDialog.java
 *
 * Created on November 8, 2003, 1:04 AM
 */
// Originally came from Trinity Software, LLC copyright 2003 to 2005.

package org.happy.artist.rmdmia.gui;
import javax.swing.JDialog;
import javax.swing.JPanel;
import javax.swing.JButton;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.ImageIcon;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.util.ArrayList;
import java.awt.ComponentOrientation;
import javax.swing.UIManager;
import javax.swing.UIDefaults;
import javax.swing.JScrollBar;
import java.awt.Graphics2D;
import java.awt.Graphics;
import java.awt.RenderingHints;  
import java.awt.event.KeyEvent;
import javax.swing.KeyStroke;
import java.awt.KeyEventDispatcher;
import java.awt.KeyboardFocusManager;

/**
 * org.happy.artist.rmdmia.gui.InformationDialog class is the Information Dialog
 * for the ROCI ROS Configuration Manager UI for Java. 
 *
 * @author Happy Artist
 * 
 * @copyright Copyright Â©2003-2014 Happy Artist. All rights reserved.
 * 
 */
public class InformationDialog extends javax.swing.JDialog {
	private int windowWidth = 425;
	private int windowHeight = 160;
        private ImageIcon btnFace = null;
    	  private ImageIcon btnFaceOnClick = null;
   	  private ImageIcon btnFaceInFocus = null;
    	  private int btnWidth = -1;
    	  private int btnHeight = -1;    
    	  private boolean isImageButton = false;
    	  private Color extBorderColor = new Color(162,186,202);
    	  private Color highlightBorderColor1 = new Color(38,54,69);
    	  private Color highlightBorderColor2 = new Color(100,132,154);
    	  private Color shadowBorderColor1 = new Color(162,182,202);
    	  private Color shadowBorderColor2 = new Color(215,226,233);

    /** Creates new form InformationDialog */
    public InformationDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        isImageButton=false;
        btnWidth = 95;
        btnHeight = 24;
        initComponents(false);
        
         setTitle("ROS Topic/Service Configuration Howto");
      
        setSize(windowWidth + 6 + getHorizontalInsetAdjustment(this.getInsets().left, this.getInsets().right), windowHeight + 73 + getVerticalInsetAdjustment(this.getInsets().top, this.getInsets().bottom));
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        int w = getSize().width;
        int h = getSize().height;
        int x = (dim.width-w)/2;
        int y = (dim.height-h)/2;
        setLocation(x, y);  
	Policy.setCaretPosition(0);
        Policy.setBackground(getBackground());
        Policy.setBackground(getBackground());
   }
 
private int getVerticalInsetAdjustment(int actualTopInset, int actualBottomInset)
{
	try
	{
		int sum = actualTopInset + actualBottomInset;
		if(sum!=25)
		{
			if(sum<25)
			{
		    		return 0 - (25 - sum);
			}
			else if(sum>25)
			{
		     		return 0 + (sum - 25);
			}
		}
		else
		{
			return 0;
		}
	}
	catch(Exception e)
	{
		return 0;
	}
	return 0;
}

private int getHorizontalInsetAdjustment(int actualLeftInset, int actualRightInset)
{
	try
	{
		int sum = actualLeftInset + actualRightInset;
		if(sum!=6)
		{
			if(sum<6)
			{
		    		return 0 - (6 - sum);
			}
			else if(sum>6)
			{
		     		return 0 + (sum - 6);
			}
		}
		else
		{
			return 0;
		}
	}
	catch(Exception e)
	{
		return 0;
	}
	return 0;
}
   
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents(boolean isImgButton) {//GEN-BEGIN:initComponents
	  isImageButton = isImgButton;
        NorthPanel = new javax.swing.JPanel();
        WestPanel = new javax.swing.JPanel();
        EastPanel = new javax.swing.JPanel();
        OKPanel = new javax.swing.JPanel();
        btnOK = new javax.swing.JButton();
        InformationDialogScrollPane = new javax.swing.JScrollPane();
        Policy = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

	  OKPanel.setLayout(new javax.swing.BoxLayout(OKPanel, javax.swing.BoxLayout.X_AXIS));
        NorthPanel.setMaximumSize(new java.awt.Dimension(12, 12));
        NorthPanel.setMinimumSize(new java.awt.Dimension(12, 12));
        NorthPanel.setPreferredSize(new java.awt.Dimension(12, 12));
        WestPanel.setMaximumSize(new java.awt.Dimension(12, 12));
        WestPanel.setMinimumSize(new java.awt.Dimension(12, 12));
        WestPanel.setPreferredSize(new java.awt.Dimension(12, 12));
        EastPanel.setMaximumSize(new java.awt.Dimension(12, 12));
        EastPanel.setMinimumSize(new java.awt.Dimension(12, 12));
        EastPanel.setPreferredSize(new java.awt.Dimension(12, 12));
	  Policy.setWrapStyleWord(true);
	  Policy.setLineWrap(true);
	  		Policy.setText("RMDMIA - ROS Configuration Manager Preview 1 HowTo\\n1. Ensure the ROS Master URL is set to the correct address.\\n2. Remember to Save frequently as changes are made via the File -> Save menu item.\\n3. Open a terminal.\n" +
"\\n4. From the Tools menu, Generate the Service Types script, then call chmod to implement execute permission.\\n5. Execute the script.\\n6. Import the Service Types Data file (an auto generated .properties file).\\n7. Save.\\n8. From the Tools menu, Generate the MD5 script, then call chmod to implement execute permission.\\n9. Execute the script.\\n10. Import the MD5 Data file (an auto generated rosmd5.properties file).\\n11. Save\\n12. Exit\\n13. On restart the all the topics will be configured.\\n14. To start Topics, and Services at RMDMIA startup select the Connect_on_startup option associated with that topic/service. It is advised that on services you enabled SVC Persistant.\\n\\nTechnical documentation on programming the RCSM, and ROCI Providers will be coming shortly.\\nKnown Issues: This is a development preview, and some features may be in development, lack documentation, and contain bugs.\n" +
"If you have any technical questions please visit the support web page, and forums. We appreciate your input, and we will do our best to help you help you. \n" +
"Expect regular slipstream releases on the happyartist.net website. This release UDPROS, is not functional, \n" +
"nor is the network auto tuner (automatic performance tuning).\\n");         

        getContentPane().setLayout(new java.awt.BorderLayout());
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });
		setResizable(false);

            btnOK.setText("OK");

            btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

if(isImageButton==false)
{
		btnOK.setMinimumSize(new java.awt.Dimension(75,23));
		btnOK.setPreferredSize(new java.awt.Dimension(75,23));
		btnOK.setMaximumSize(new java.awt.Dimension(120,23));
}

        jLabel2.setMaximumSize(new java.awt.Dimension(32767, 12));
	  jLabel2.setMinimumSize(new java.awt.Dimension(12, 12));
        OKPanel.add(jLabel2);

        OKPanel.add(btnOK);

        jLabel1.setMaximumSize(new java.awt.Dimension(12, 12));
        jLabel1.setMinimumSize(new java.awt.Dimension(12, 12));
        jLabel1.setPreferredSize(new java.awt.Dimension(12, 12));
        OKPanel.add(jLabel1);

        OKPanel.setMaximumSize(new java.awt.Dimension(32767, 46));
        OKPanel.setMinimumSize(new java.awt.Dimension(12, 46));
        OKPanel.setPreferredSize(new java.awt.Dimension(12, 46));

        getContentPane().add(OKPanel, java.awt.BorderLayout.SOUTH);
        getContentPane().add(NorthPanel, java.awt.BorderLayout.NORTH);
        getContentPane().add(WestPanel, java.awt.BorderLayout.WEST);
        getContentPane().add(EastPanel, java.awt.BorderLayout.EAST);

        Policy.setEditable(false);
        InformationDialogScrollPane.setViewportView(Policy);

//


        getContentPane().add(InformationDialogScrollPane, java.awt.BorderLayout.CENTER);
	  	if(isImageButton==true)
	  	{
	  		setKeyManager();
		}
        pack();
    }//GEN-END:initComponents

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
            dispose();
    }//GEN-LAST:event_btnOKActionPerformed

    private void btnImageOKMouseClicked(java.awt.event.MouseEvent evt) 
	{
		dispose();
	}    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog
    
    /**
     * @param args the command line arguments
     */
 //   public static void main(String args[]) {
 //       new InformationDialog(new javax.swing.JFrame(), true).show();
 //   }

   public void setButtonTextColor(Color fontColor)
   {
	try
	{
            btnOK.setForeground(fontColor);
	}
	catch(Exception e)
	{
		e.printStackTrace();
	}
   }

   public void setBackgroundColor(Color BGColor)
   {
	try
	{
		getContentPane().setBackground(BGColor);
		NorthPanel.setBackground(BGColor);
		WestPanel.setBackground(BGColor);
		EastPanel.setBackground(BGColor);
		OKPanel.setBackground(BGColor);
		InformationDialogScrollPane.setBackground(BGColor);
		jLabel1.setBackground(BGColor);
		jLabel2.setBackground(BGColor);
	}
	catch(Exception e)
	{
		e.printStackTrace();
	}
   }  

     private static Object[] getStringArraysFromString(String textArrayString)
    {
        ArrayList aryList = new ArrayList();
        String tempString = "";
        
        while(textArrayString.indexOf(",")!=-1)
        {
            tempString = textArrayString.substring(0,textArrayString.indexOf(","));
            textArrayString = textArrayString.substring(textArrayString.indexOf(",") + 1);
            aryList.add(tempString);
        }
        aryList.add(textArrayString);
        return aryList.toArray();
    }   

    public void paint(Graphics g)
    {
	Graphics2D g2 = (Graphics2D) g;
	g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
	super.paint(g);
    } 

    public void setKeyManager()
    { 
     KeyboardFocusManager.getCurrentKeyboardFocusManager().addKeyEventDispatcher(
        new KeyEventDispatcher() {
            public boolean dispatchKeyEvent(KeyEvent e) 
            {
               
              if (e.getID() == KeyEvent.KEY_PRESSED) 
              {
                   if (e.isAltDown() == true || e.isMetaDown() == true || e.isControlDown()==true) 
                   {   
				armed = true;
			 }
              }            
                // This example converts all typed keys to upper case
              if (e.getID() == KeyEvent.KEY_RELEASED) 
              {
			if(armed==true)
			{
				armed = false;
			}
              }
              // If the key should not be dispatched to the
              // focused component, set discardEvent to true
              boolean discardEvent = false;
              return discardEvent;
            }
        });       
    }

    private boolean armed = false;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel NorthPanel;
    private javax.swing.JPanel WestPanel;
    private javax.swing.JPanel EastPanel;
    private javax.swing.JPanel OKPanel;
    private javax.swing.JTextArea Policy;
    private javax.swing.JScrollPane InformationDialogScrollPane;
    private javax.swing.JButton btnOK;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
    
}
