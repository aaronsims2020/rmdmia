package org.happy.artist.rmdmia.roci.plugins;

import java.io.UnsupportedEncodingException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingWorker;
import org.happy.artist.rmdmia.Controller;
import org.happy.artist.rmdmia.perception.engine.plugins.ROSPEProvider;
import org.happy.artist.rmdmia.rcsm.providers.ros.ROSNode;
import org.happy.artist.rmdmia.rcsm.providers.ros.client.message.ROSSubscriberMessageManager;

/**
 * The ROS Recorder Panel for the rosbag Controller Plugin.
 *
 * @author Happy Artist
 * 
 * @copyright Copyright Â©2014 Happy Artist. All rights reserved.
 * 
 */
public class ROSRecorderPanel extends javax.swing.JPanel {

    // Reference to ROSPEProvider
    private ROSPEProvider provider;
    private Controller controller;
    private ROSNode rosNode;
    /**
     * Creates new form ROSRecorderPanel
     */
    public ROSRecorderPanel(ROSPEProvider provider, Controller controller) 
    {
        this.controller=controller;
        this.rosNode = (ROSNode)controller.getRCSM().getProviderByName("ros");        
        this.provider=provider;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        checkRecordSensors = new javax.swing.JCheckBox();
        checkRecordMovements = new javax.swing.JCheckBox();
        btnRecord = new javax.swing.JToggleButton();
        lblDirectory = new javax.swing.JLabel();
        tfDirectory = new javax.swing.JTextField();

        checkRecordSensors.setText("Record Sensors");
        checkRecordSensors.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                checkRecordSensorsActionPerformed(evt);
            }
        });

        checkRecordMovements.setText("Record Movements");

        btnRecord.setText("Start Recording");
        btnRecord.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnRecordActionPerformed(evt);
            }
        });

        lblDirectory.setText("Directory to record bag files:");

        tfDirectory.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                tfDirectoryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRecord)
                    .addComponent(checkRecordMovements)
                    .addComponent(checkRecordSensors)
                    .addComponent(tfDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lblDirectory)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkRecordSensors)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(checkRecordMovements)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnRecord)
                .addContainerGap(30, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void checkRecordSensorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkRecordSensorsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkRecordSensorsActionPerformed
    // btnRecordActionPerformed method variables.
    private boolean isRecording=false;
    private int hids=0;
    private int[] hid_array;
  //  private Fixer fixer = new Fixer();
    private void btnRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecordActionPerformed
      new Fixer().execute();
        /*  if(isRecording)
        {
            // Stop Recording
            this.isRecording=false;
            btnRecord.setText("Start Recording");
            // Stop Recording ROSBag.
            provider.stopRecording();
        }
        else
        {
            //Start Recording
            this.isRecording=true;
            btnRecord.setText("Stop Recording");
            if(checkRecordSensors.isSelected())
            {
                DateFormat df = new SimpleDateFormat("yyyy-MM-DD-HH-mm-ss");
                Date today = Calendar.getInstance().getTime();    
                // get hid array
                try 
                {
                    this.hids = SubscriberMessageManager.getInstance(rosNode.getCallerID(),rosNode).getTopicDefinitions().length;
                } 
                catch (UnsupportedEncodingException ex) 
                {
                    Logger.getLogger(ROSRecorderPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
                this.hid_array=new int[hids];
                for(int i=0;i<hids;i++)
                {
                    hid_array[i]=i;
                }
                // Start Recording All Sensors
                provider.startRecording(df.format(today).concat(".bag.active"), hid_array);
            }
            if(checkRecordMovements.isSelected())
            {
                // Record Movements - not implemented.
                
            }
        }
        */ 
    }//GEN-LAST:event_btnRecordActionPerformed

  class Fixer extends SwingWorker<String, Object> {
       @Override
       public String doInBackground() {
                       
        if(isRecording)
        {
            // Stop Recording
            ROSRecorderPanel.this.isRecording=false;
            btnRecord.setText("Start Recording");
            // Stop Recording ROSBag.
            provider.stopRecording();
        }
        else
        {
            //Start Recording
            ROSRecorderPanel.this.isRecording=true;
            btnRecord.setText("Stop Recording");
            if(checkRecordSensors.isSelected())
            {
                DateFormat df = new SimpleDateFormat("yyyy-MM-DD-HH-mm-ss");
                Date today = Calendar.getInstance().getTime();    
                // get hid array
                try 
                {
                    ROSRecorderPanel.this.hids = ROSSubscriberMessageManager.getInstance(rosNode.getCallerID(),rosNode).getTopicDefinitions().length;
                } 
                catch (UnsupportedEncodingException ex) 
                {
                    Logger.getLogger(ROSRecorderPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
                ROSRecorderPanel.this.hid_array=new int[hids];
                for(int i=0;i<hids;i++)
                {
                    hid_array[i]=i;
                }
                // Start Recording All Sensors
                provider.startRecording(df.format(today).concat(".bag.active"), hid_array);
            }
            if(checkRecordMovements.isSelected())
            {
                // Record Movements - not implemented.
                
            }
        }
        return "OK";
       }
   }    
    
    private void tfDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfDirectoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfDirectoryActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnRecord;
    private javax.swing.JCheckBox checkRecordMovements;
    private javax.swing.JCheckBox checkRecordSensors;
    private javax.swing.JLabel lblDirectory;
    private javax.swing.JTextField tfDirectory;
    // End of variables declaration//GEN-END:variables
}
